Stage 1:
    Inputs (fl[16], fh[16], symb[4], nsyms[5], LUT[addr:8,data:16)
    Outputs (UU[16], COMP_mux_1[1], VV[16], A[16]) 

        UU = [(fl >> EC_PROB_SHIFT) >> 1] + [EC_MIN_PROB*((nsyms-1)-(symb-1))]      // LUT

        VV = [(fh >> EC_PROB_SHIFT) >> 1] + [EC_MIN_PROB*((nsyms-1)-(symb+0))]      // LUT
        
        A = UU - VV

        COMP_mux_1 (fl < CDF_PROB_TOP)

------------------------------------------------
Stage 2:
    Inputs (UU[16], COMP_mux_1[1], VV[16], in_range[16], in_low[16], A[16])
    Outputs (LOW[16], RANGE[16])
    
        RR = in_range >> 8
        mult_low_1 = RR * UU
        
        mult_range_1 = RR * A
        mult_range_2 = RR * VV
        
        LOW_1 = (in_low + in_range) - mult_low_1[15:0]
        LOW_2 = in_low
        
        RANGE_1 = mult_range_1[15:0]
        RANGE_2 = in_range - mult_range_2[15:0]

        mux_1_range (COMP_mux_1)        -> RANGE
            1: RANGE_1
            0: RANGE_2
            
        mux_1_low (COMP_mux_1)          -> LOW
            1: LOW_1
            0: in_low        

------------------------------------------------
Stage 3: 
    Inputs (LOW[16], RANGE[16], in_cnt[32])
    Outputs (LOW[16], RANGE[16], in_cnt[32], D[5], C_s0[32], M_s0[32])     
        
        D = 16 - __builtin_clz(RANGE)
        C_s0 = in_cnt + 16
        M_s0 = [1 << (in_cnt + 16)] - 1
        
        
        
-----------------------------------------------
Stage 4:
    Inputs (LOW[16], RANGE[16], in_cnt[32], D[5], C_s0[32], M_s0[32])
    Outputs (LOW[16], RANGE[16], in_cnt[32], D[5], S[32], COMP_mux_2[1], COMP_mux_3[1], C_s0[32], M_s0[32], M_s8[32], C_s8[32], LOW_s8[16])
        
        S = in_cnt + D
        COMP_mux_2 = (S > 0) OR (S = 0)
        COMP_mux_3 = (S > 8) OR (S = 8)
        
        M_s8 = M_s0 >> 8
        C_s8 = C_s0 - 8
        LOW_s8 = LOW and M_s0
        
-----------------------------------------------
Stage 5:
    Inputs (LOW[16], RANGE[16], in_cnt[32], D[5], C_s0[32], M_s0[32], S[32], COMP_mux_2[1], COMP_mux_3[1], M_s8[32], C_s8[32], LOW_s8[16])
    Outputs (OUT_LOW[16], OUT_RANGE[16], OUT_CNT[32])
    
    MUX_3_low (COMP_mux_3)
        1: LOW_s8
        0: LOW
    MUX_3_c (COMP_mux_3)
        1: C_s8
        0: C_s0
    MUX_3_m (COMP_mux_3)
        1: M_s8
        0: M_s0
    
    OUT_LOW_1 = [MUX_3_low and MUX_3_m] << D
    OUT_LOW_2 = LOW << D
    
    MUX_2_low (COMP_mux_2)
        1: OUT_LOW_1
        0: OUT_LOW_2
    
    OUT_RANGE = RANGE << D
    
    OUT_CNT_1 = [MUX_3_c + D] - 24
    
    MUX_2_cnt (COMP_mux_2)
        1: OUT_CNT_1
        0: S
        
        
        
        




